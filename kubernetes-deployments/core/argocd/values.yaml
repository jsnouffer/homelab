argo-cd:
  enabled: true
  configs:
    params:
      server.insecure: "true"
      applicationsetcontroller.enable.policy.override: true
    secret:
      createSecret: false
  server:
    env:
      - name: TZ
        value: America/New_York
    resources:
      limits:
        cpu: 250m
        memory: 512Mi
      requests:
        cpu: 25m
        memory: 48Mi
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: lets-encrypt-production
        external-dns.alpha.kubernetes.io/alias: "true"
        ingress.kubernetes.io/force-ssl-redirect: "true"
        ingress.kubernetes.io/protocol: http
        kubernetes.io/ingress.class: traefik
        kubernetes.io/tls-acme: "true"
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.middlewares: traefik-default-security@kubernetescrd
        traefik.ingress.kubernetes.io/router.tls.options: traefik-default-tls@kubernetescrd
        traefik.ingress.kubernetes.io/router.tls: "true"
      hostname: &domain argocd.jsnouff.net
      tls:
        - secretName: tls-secret
          hosts:
            - *domain
  controller:
    resources:
      limits:
        cpu: 1000m
        memory: 1000Mi
      requests:
        cpu: 350m
        memory: 400Mi
  repoServer:
    env:
      - name: TZ
        value: America/New_York
    resources:
      limits:
        cpu: 1000m
        memory: 512Mi
      requests:
        cpu: 150m
        memory: 64Mi
  applicationSet:
    enabled: true
    resources:
      limits:
        cpu: 350m
        memory: 128Mi
      requests:
        cpu: 200m
        memory: 48Mi
  redis:
    enabled: true
    env:
      - name: TZ
        value: America/New_York
    resources:
      limits:
        cpu: 100m
        memory: 64Mi
      requests:
        cpu: 10m
        memory: 24Mi
  notifications:
    enabled: false
  dex:
    enabled: false

argocd-apps:
  enabled: true
  projects:
    applications:
      description: Generic project for applications
      finalizers: &app-projects-finalizers
        - resources-finalizer.argocd.argoproj.io
      sourceRepos: &app-projects-source-repos
        - '*'
      destinations: &app-projects-destinations
        - namespace: '*'
          server: '*'
      clusterResourceWhitelist: &app-projects-cluster-resource-whitelist
        - group: '*'
          kind: '*'
      namespaceResourceWhitelist: &app-projects-ns-resource-whitelist
        - group: '*'
          kind: '*'
    automation:
      description: Project for automation deployments
      finalizers: *app-projects-finalizers
      sourceRepos: *app-projects-source-repos
      destinations: *app-projects-destinations
      clusterResourceWhitelist: *app-projects-cluster-resource-whitelist
      namespaceResourceWhitelist: *app-projects-ns-resource-whitelist
    core:
      description: Project for core services
      finalizers: *app-projects-finalizers
      sourceRepos: *app-projects-source-repos
      destinations: *app-projects-destinations
      clusterResourceWhitelist: *app-projects-cluster-resource-whitelist
      namespaceResourceWhitelist: *app-projects-ns-resource-whitelist
    infrastructure:
      description: Project for non-core infrastructure services
      finalizers: *app-projects-finalizers
      sourceRepos: *app-projects-source-repos
      destinations: *app-projects-destinations
      clusterResourceWhitelist: *app-projects-cluster-resource-whitelist
      namespaceResourceWhitelist: *app-projects-ns-resource-whitelist
    media:
      description: Project for media services
      finalizers: *app-projects-finalizers
      sourceRepos: *app-projects-source-repos
      destinations: *app-projects-destinations
      clusterResourceWhitelist: *app-projects-cluster-resource-whitelist
      namespaceResourceWhitelist: *app-projects-ns-resource-whitelist
    observability:
      description: Project for observability services
      finalizers: *app-projects-finalizers
      sourceRepos: *app-projects-source-repos
      destinations: *app-projects-destinations
      clusterResourceWhitelist: *app-projects-cluster-resource-whitelist
      namespaceResourceWhitelist: *app-projects-ns-resource-whitelist
    storage:
      description: Project for storage services
      finalizers: []
      sourceRepos: *app-projects-source-repos
      destinations: *app-projects-destinations
      clusterResourceWhitelist: *app-projects-cluster-resource-whitelist
      namespaceResourceWhitelist: *app-projects-ns-resource-whitelist
  applicationsets:
    applications:
      goTemplate: true
      generators:
      - git:
          repoURL: &gitops-repo-url git@github.com:jsnouffer/homelab.git
          revision: &gitops-repo-revision HEAD
          directories:
          - path: kubernetes-deployments/applications/*
      template:
        metadata:
          name: '{{ base .path.path }}'
          labels: {}
          annotations:
            argocd.argoproj.io/manifest-generate-paths: .

            argocd-image-updater.argoproj.io/write-back-method: git
            argocd-image-updater.argoproj.io/git-branch: main:image-updater-{{`{{.SHA256}}`}}
            argocd-image-updater.argoproj.io/image-list: >-
              bitwarden=vaultwarden/server,
              freshrss=freshrss/freshrss,
              komodo=ghcr.io/moghtech/komodo-core,
              linkding=sissbruecker/linkding

            argocd-image-updater.argoproj.io/bitwarden.helm.image-name: bitwarden.controllers.main.containers.main.image.repository
            argocd-image-updater.argoproj.io/bitwarden.helm.image-tag: bitwarden.controllers.main.containers.main.image.tag

            argocd-image-updater.argoproj.io/freshrss.helm.image-name: freshrss.controllers.main.containers.main.image.repository
            argocd-image-updater.argoproj.io/freshrss.helm.image-tag: freshrss.controllers.main.containers.main.image.tag

            argocd-image-updater.argoproj.io/komodo.helm.image-name: komodo.controllers.komodo.containers.komodo.image.repository
            argocd-image-updater.argoproj.io/komodo.helm.image-tag: komodo.controllers.komodo.containers.komodo.image.tag

            argocd-image-updater.argoproj.io/linkding.helm.image-name: linkding.controllers.main.containers.main.image.repository
            argocd-image-updater.argoproj.io/linkding.helm.image-tag: linkding.controllers.main.containers.main.image.tag
        spec:
          project: applications
          source:
            repoURL: *gitops-repo-url
            targetRevision: *gitops-repo-revision
            path: '{{ .path.path }}'
            helm: &appsets-helm
              valueFiles:
                - values.yaml
          destination: &appsets-destination
            server: https://kubernetes.default.svc
            namespace: '{{ base .path.path }}'
          revisionHistoryLimit: 5
          syncPolicy:
            syncOptions: &appsets-sync-options
              - ApplyOutOfSyncOnly=true
              - CreateNamespace=true
              - RespectIgnoreDifferences=true
              - PruneLast=true
          ignoreDifferences: []
      syncPolicy:
        preserveResourcesOnDeletion: true
        applicationsSync: sync
    automation:
      goTemplate: true
      generators:
      - git:
          repoURL: *gitops-repo-url
          revision: *gitops-repo-revision
          directories:
          - path: kubernetes-deployments/automation/*
      template:
        metadata:
          name: '{{ base .path.path }}'
          labels: {}
          annotations:
            argocd.argoproj.io/manifest-generate-paths: .

            argocd-image-updater.argoproj.io/write-back-method: git
            argocd-image-updater.argoproj.io/git-branch: main:image-updater-{{`{{.SHA256}}`}}
            argocd-image-updater.argoproj.io/image-list: >-
              changedetection=dgtlmoon/changedetection.io

            argocd-image-updater.argoproj.io/changedetection.helm.image-name: changedetection.controllers.main.containers.main.image.repository
            argocd-image-updater.argoproj.io/changedetection.helm.image-tag: changedetection.controllers.main.containers.main.image.tag
        spec:
          project: automation
          source:
            repoURL: *gitops-repo-url
            targetRevision: *gitops-repo-revision
            path: '{{ .path.path }}'
            helm: *appsets-helm
          destination: *appsets-destination
          revisionHistoryLimit: 5
          syncPolicy:
            syncOptions: *appsets-sync-options
          ignoreDifferences: []
      syncPolicy:
        preserveResourcesOnDeletion: true
        applicationsSync: sync
    core:
      goTemplate: true
      generators:
      - git:
          repoURL: *gitops-repo-url
          revision: *gitops-repo-revision
          directories:
          - path: kubernetes-deployments/core/*
      template:
        metadata:
          name: '{{ base .path.path }}'
          labels: {}
          annotations:
            argocd.argoproj.io/manifest-generate-paths: .
        spec:
          project: core
          source:
            repoURL: *gitops-repo-url
            targetRevision: *gitops-repo-revision
            path: '{{ .path.path }}'
            helm: *appsets-helm
          destination: *appsets-destination
          revisionHistoryLimit: 5
          syncPolicy:
            syncOptions: *appsets-sync-options
            automated:
              prune: false
              selfHeal: true
          ignoreDifferences:
            - group: apiextensions.k8s.io
              kind: CustomResourceDefinition
              name: bgppeers.metallb.io
              jsonPointers:
              - /spec/conversion/webhook/clientConfig/caBundle
      syncPolicy:
        preserveResourcesOnDeletion: true
        applicationsSync: sync
    infrastructure:
      goTemplate: true
      generators:
      - git:
          repoURL: *gitops-repo-url
          revision: *gitops-repo-revision
          directories:
          - path: kubernetes-deployments/infrastructure/*
      template:
        metadata:
          name: '{{ base .path.path }}'
          labels: {}
          annotations:
            argocd.argoproj.io/manifest-generate-paths: .

            argocd-image-updater.argoproj.io/write-back-method: git
            argocd-image-updater.argoproj.io/git-branch: main:image-updater-{{`{{.SHA256}}`}}
            argocd-image-updater.argoproj.io/image-list: cf=cloudflare/cloudflared

            argocd-image-updater.argoproj.io/cf.helm.image-name: cloudflare-tunnel.controllers.main.containers.main.image.repository
            argocd-image-updater.argoproj.io/cf.helm.image-tag: cloudflare-tunnel.controllers.main.containers.main.image.tag
        spec:
          project: infrastructure
          source:
            repoURL: *gitops-repo-url
            targetRevision: *gitops-repo-revision
            path: '{{ .path.path }}'
            helm: *appsets-helm
          destination: *appsets-destination
          revisionHistoryLimit: 5
          syncPolicy:
            syncOptions: *appsets-sync-options
            automated:
              prune: false
              selfHeal: true
      syncPolicy:
        preserveResourcesOnDeletion: true
        applicationsSync: sync
    media:
      goTemplate: true
      generators:
      - git:
          repoURL: *gitops-repo-url
          revision: *gitops-repo-revision
          directories:
          - path: kubernetes-deployments/media/*
      template:
        metadata:
          name: '{{ base .path.path }}'
          labels: {}
          annotations:
            argocd.argoproj.io/manifest-generate-paths: .

            argocd-image-updater.argoproj.io/write-back-method: git
            argocd-image-updater.argoproj.io/git-branch: main:image-updater-{{`{{.SHA256}}`}}
            argocd-image-updater.argoproj.io/image-list: >-
              audiobookshelf=advplyr/audiobookshelf

            argocd-image-updater.argoproj.io/audiobookshelf.helm.image-name: audiobookshelf.controllers.main.containers.main.image.repository
            argocd-image-updater.argoproj.io/audiobookshelf.helm.image-tag: audiobookshelf.controllers.main.containers.main.image.tag
        spec:
          project: media
          source:
            repoURL: *gitops-repo-url
            targetRevision: *gitops-repo-revision
            path: '{{ .path.path }}'
            helm: *appsets-helm
          destination: *appsets-destination
          revisionHistoryLimit: 5
          syncPolicy:
            syncOptions: *appsets-sync-options
          ignoreDifferences: []
      syncPolicy:
        preserveResourcesOnDeletion: true
        applicationsSync: sync
    observability:
      goTemplate: true
      generators:
      - git:
          repoURL: *gitops-repo-url
          revision: *gitops-repo-revision
          directories:
          - path: kubernetes-deployments/observability/*
      template:
        metadata:
          name: '{{ base .path.path }}'
          labels: {}
          annotations:
            argocd.argoproj.io/manifest-generate-paths: .
        spec:
          project: observability
          source:
            repoURL: *gitops-repo-url
            targetRevision: *gitops-repo-revision
            path: '{{ .path.path }}'
            helm: *appsets-helm
          destination: *appsets-destination
          revisionHistoryLimit: 5
          syncPolicy:
            syncOptions: *appsets-sync-options
          ignoreDifferences:
            - group: admissionregistration.k8s.io
              kind: ValidatingWebhookConfiguration
              jqPathExpressions:
              - .webhooks[].clientConfig.caBundle
            - kind: Secret
              name: victoria-metrics-victoria-metrics-operator-validation
              jsonPointers:
              - /data
      syncPolicy:
        preserveResourcesOnDeletion: true
        applicationsSync: sync
    storage:
      goTemplate: true
      generators:
      - git:
          repoURL: *gitops-repo-url
          revision: *gitops-repo-revision
          directories:
          - path: kubernetes-deployments/storage/*
      template:
        metadata:
          name: '{{ base .path.path }}'
          labels: {}
          annotations:
            argocd.argoproj.io/manifest-generate-paths: .
        spec:
          project: storage
          source:
            repoURL: *gitops-repo-url
            targetRevision: *gitops-repo-revision
            path: '{{ .path.path }}'
            helm: *appsets-helm
          destination: *appsets-destination
          revisionHistoryLimit: 5
          syncPolicy:
            syncOptions: *appsets-sync-options
          ignoreDifferences: []
      syncPolicy:
        preserveResourcesOnDeletion: true
        applicationsSync: create-update

argocd-image-updater:
  enabled: true
  fullnameOverride: argocd-image-updater
  extraEnv:
    - name: TZ
      value: America/New_York
  config:
    argocd:
      insecure: true
      plaintext: true
    gitCommitUser: "Argo Image Updater"
    gitCommitMail: "jsnouff+argoimage@gmail.com"
    logLevel: "debug"