dispatcharr:
  enabled: true
  global:
    fullnameOverride: dispatcharr
  defaultPodOptions:
    automountServiceAccountToken: false
    securityContext:
      seccompProfile:
        type: RuntimeDefault
  controllers:
    dispatcharr:
      type: deployment
      strategy: Recreate
      containers:
        dispatcharr:
          image:
            repository: ghcr.io/dispatcharr/dispatcharr
            tag: latest # overriden by ArgoCD helm parameters file
            pullPolicy: IfNotPresent
          env:
            DISPATCHARR_ENV: prod
            REDIS_HOST: valkey
            CELERY_BROKER_URL: redis://valkey:6379/0
            DISPATCHARR_LOG_LEVEL: info
          resources:
            requests:
              cpu: 100m
              memory: 750Mi
            limits:
              cpu: 1000m
              memory: 2Gi
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
          probes:
            liveness: &dispatcharr-lr-probe
              enabled: true
              type: HTTP
              path: /
              spec:
                initialDelaySeconds: 0
                periodSeconds: 10
                timeoutSeconds: 1
                successThreshold: 1
                failureThreshold: 3
            readiness: *dispatcharr-lr-probe
            startup:
              enabled: true
              type: HTTP
              path: /
              spec:
                initialDelaySeconds: 0
                periodSeconds: 5
                timeoutSeconds: 5
                successThreshold: 1
                failureThreshold: 10
  service:
    dispatcharr:
      controller: dispatcharr
      ports:
        http:
          port: &port 9191
  ingress:
    dispatcharr:
      enabled: true
      hosts:
        - host: &domain dispatcharr.jsnouff.net
          paths:
            - path: /
              pathType: Prefix
              service:
                name: dispatcharr
                port: *port
      tls:
        - hosts:
            - *domain
          secretName: tls-secret
      annotations:
        cert-manager.io/cluster-issuer: lets-encrypt-production
        ingress.kubernetes.io/force-ssl-redirect: "true"
        ingress.kubernetes.io/protocol: http
        kubernetes.io/ingress.class: traefik
        kubernetes.io/tls-acme: "true"
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.middlewares: traefik-default-security@kubernetescrd
        traefik.ingress.kubernetes.io/router.tls.options: traefik-default-tls@kubernetescrd
        traefik.ingress.kubernetes.io/router.tls: "true"
  persistence:
    config:
      enabled: true
      accessMode: ReadWriteOnce
      size: 1Gi
      advancedMounts:
        dispatcharr:
          dispatcharr:
            - path: /data
              subPath: data

databases:
  valkey:
    enabled: true

common:
  resticBackups:
    enabled: true
    targets:
      dispatcharr-data:
        pvcName: dispatcharr
        bucket: dispatcharr-backup
        restoreVersion: latest
        tags:
          - "dispatcharr-image:{{ $.Values.dispatcharr.controllers.dispatcharr.containers.dispatcharr.image.tag }}"
        affinity:
          podAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                      - dispatcharr
                topologyKey: kubernetes.io/hostname
