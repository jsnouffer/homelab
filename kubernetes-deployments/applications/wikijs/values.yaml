wikijs:
  enabled: true
  global:
    fullnameOverride: wikijs
  controllers:
    main:
      containers:
        main:
          image:
            repository: ghcr.io/requarks/wiki
            tag: 2.5.301
          env:
            DB_TYPE: postgres
            DB_HOST: &postgres-name postgresql
            DB_PORT: "5432"
            DB_NAME: &db wiki
            DB_USER: &db-user wiki
            DB_PASS:
              valueFrom:
                secretKeyRef:
                  key: &db-secret-key password
                  name: &db-secret db-credentials
          probes:
            liveness: &lr-probe
              enabled: true
              type: &probe-type HTTP
              path: &probe-path /healthz
            readiness: *lr-probe
            startup:
              enabled: true
              type: *probe-type
              path: *probe-path
              spec:
                initialDelaySeconds: 5
                periodSeconds: 5
                timeoutSeconds: 5
                successThreshold: 1
                failureThreshold: 60
  service:
    main:
      controller: main
      ports:
        http:
          port: &port 3000
  ingress:
    main:
      enabled: true
      hosts:
        - host: &domain wikijs.jsnouff.net
          paths:
            - path: /
              pathType: Prefix
              service:
                name: wikijs
                port: *port
      tls:
        - hosts:
            - *domain
          secretName: tls-secret
      annotations:
        cert-manager.io/cluster-issuer: lets-encrypt-production
        ingress.kubernetes.io/force-ssl-redirect: "true"
        ingress.kubernetes.io/protocol: http
        kubernetes.io/ingress.class: traefik
        kubernetes.io/tls-acme: "true"
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.middlewares: traefik-default-security@kubernetescrd
        traefik.ingress.kubernetes.io/router.tls.options: traefik-default-tls@kubernetescrd
        traefik.ingress.kubernetes.io/router.tls: "true"

postgresql:
  fullnameOverride: *postgres-name
  primary:
    resources:
      requests:
        cpu: 20m
        memory: 32Mi
      limits:
        cpu: 250m
        memory: 300Mi
    persistence:
      size: 1Gi
  auth:
    username: *db-user
    database: *db
    existingSecret: *db-secret
    secretKeys:
      adminPasswordKey: postgres-password
      userPasswordKey: *db-secret-key
      replicationPasswordKey: replication-password
  serviceAccount:
    create: false

common:
  resticBackups:
    enabled: true
    targets:
      postgresql:
        pvcName: data-postgresql-0
        bucket: wikijs-postgresql-backup
        restoreVersion: latest
        affinity:
          podAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: statefulset.kubernetes.io/pod-name
                    operator: In
                    values:
                    - postgresql-0
                topologyKey: kubernetes.io/hostname