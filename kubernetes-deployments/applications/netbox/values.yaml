netbox:
  enabled: true
  global:
    fullnameOverride: netbox
  defaultPodOptions:
    automountServiceAccountToken: false
    affinity:
      podAffinity: &netbox-pod-affinity
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
              - netbox
          topologyKey: kubernetes.io/hostname
    securityContext:
      fsGroup: 1000
      runAsNonRoot: true
  controllers:
    netbox:
      type: deployment
      initContainers:
        init-dirs:
          image:
            repository: busybox
            tag: latest
            pullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - mkdir -p /opt/unit/state /opt/unit/tmp
          securityContext: &container-security-context
            runAsUser: 1000
            runAsGroup: 1000
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
      containers:
        netbox:
          image: &netbox-image
            repository: netboxcommunity/netbox
            tag: v4.2
            pullPolicy: IfNotPresent
          env:
            SUPERUSER_NAME: admin
            SUPERUSER_EMAIL: admin@example.com
            SKIP_STARTUP_SCRIPTS: "true"
          resources:
            requests:
              cpu: 100m
              memory: 350Mi
            limits:
              cpu: 1500m
              memory: 1Gi
          securityContext: *container-security-context
          probes:
            liveness: &lr-probe
              enabled: true
              type: HTTP
              path: /login/
              spec:
                initialDelaySeconds: 10
                periodSeconds: 10
                timeoutSeconds: 1
                successThreshold: 1
                failureThreshold: 3
            readiness: *lr-probe
            startup:
              enabled: true
              type: HTTP
              path: /login/
              spec:
                initialDelaySeconds: 60
                periodSeconds: 5
                timeoutSeconds: 5
                successThreshold: 1
                failureThreshold: 30
    worker:
      type: deployment
      containers:
        netbox-worker:
          image: *netbox-image
          command:
            - /opt/netbox/venv/bin/python
            - /opt/netbox/netbox/manage.py
            - rqworker
          resources:
            requests:
              cpu: 10m
              memory: 125Mi
            limits:
              cpu: 1000m
              memory: 400Mi
          securityContext: *container-security-context
    housekeeping:
      type: cronjob
      pod:
        restartPolicy: OnFailure
      containers:
        netbox-housekeeping:
          image: *netbox-image
          command:
            - /opt/netbox/venv/bin/python
            - /opt/netbox/netbox/manage.py
            - housekeeping
          securityContext: *container-security-context
      cronjob:
        suspend: false
        concurrencyPolicy: Forbid
        timeZone: America/New_York
        schedule: "0 0 * * *"
        failedJobsHistory: 1
        successfulJobsHistory: 1

  service:
    netbox:
      controller: netbox
      ports:
        http:
          port: &port 8080
  ingress:
    netbox:
      enabled: true
      hosts:
        - host: &domain netbox.jsnouff.net
          paths:
            - path: /
              pathType: Prefix
              service:
                name: netbox
                port: *port
      tls:
        - hosts:
            - *domain
          secretName: tls-secret
      annotations:
        cert-manager.io/cluster-issuer: lets-encrypt-production
        ingress.kubernetes.io/force-ssl-redirect: "true"
        ingress.kubernetes.io/protocol: http
        kubernetes.io/ingress.class: traefik
        kubernetes.io/tls-acme: "true"
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.middlewares: traefik-default-security@kubernetescrd
        traefik.ingress.kubernetes.io/router.tls.options: traefik-default-tls@kubernetescrd
        traefik.ingress.kubernetes.io/router.tls: "true"
  persistence:
    data:
      enabled: true
      accessMode: ReadWriteOnce
      size: 1Gi
      advancedMounts:
        netbox:
          netbox: &data-pvc-mount-paths
            - path: /opt/netbox/netbox/media
              subPath: media
            - path: /opt/netbox/netbox/reports
              subPath: reports
            - path: /opt/netbox/netbox/scripts
              subPath: scripts
        worker:
          netbox-worker: *data-pvc-mount-paths
        housekeeping:
          netbox-housekeeping: *data-pvc-mount-paths
    config:
      enabled: true
      type: configMap
      name: netbox
      advancedMounts:
        netbox:
          netbox: &config-mount-paths
            - path: /etc/netbox/config/configuration.py
              subPath: configuration.py
              readOnly: true
            - path: /run/config/netbox
              readOnly: true
        worker:
          netbox-worker: *config-mount-paths
        housekeeping:
          netbox-housekeeping: *config-mount-paths
    secrets:
      enabled: true
      type: custom
      volumeSpec:
        projected:
          defaultMode: 420
          sources:
          - secret:
              name: netbox-credentials
              items:
              - key: superuser_password
                path: superuser_password
              - key: superuser_api_token
                path: superuser_api_token
              - key: email_password
                path: email_password
              - key: napalm_password
                path: napalm_password
              - key: secret_key
                path: secret_key
          - secret:
              name: db-credentials
              items:
              - key: password
                path: db_password
      advancedMounts:
        netbox:
          netbox:
            - path: /run/secrets/netbox
              readOnly: true
            - path: /run/secrets/superuser_password
              subPath: superuser_password
              readOnly: true
            - path: /run/secrets/superuser_api_token
              subPath: superuser_api_token
              readOnly: true
        worker:
          netbox-worker:
            - path: /run/secrets/netbox
              readOnly: true
        housekeeping:
          netbox-housekeeping:
            - path: /run/secrets/netbox
              readOnly: true
    tmp:
      enabled: true
      type: emptyDir
      medium: Memory
      advancedMounts:
        netbox:
          netbox:
            - path: /tmp
        worker:
          netbox-worker:
            - path: /tmp
        housekeeping:
          netbox-housekeeping:
            - path: /tmp
    optunit:
      enabled: true
      type: emptyDir
      medium: Memory
      advancedMounts:
        netbox:
          init-dirs:
            - path: /opt/unit
          netbox:
            - path: /opt/unit

databases:
  postgresql:
    enabled: true
    controllers:
      postgresql:
        containers:
          postgresql:
            env:
              POSTGRES_USER: netbox
              POSTGRES_DB: netbox
              POSTGRES_PASSWORD:
                valueFrom:
                  secretKeyRef:
                    key: password
                    name: db-credentials
  valkey:
    enabled: true

common:
  resticBackups:
    enabled: true
    targets:
      netbox-data:
        pvcName: netbox-data
        bucket: netbox-data-backup
        restoreVersion: latest
        tags:
          - "netbox-image:{{ $.Values.netbox.controllers.netbox.containers.netbox.image.tag }}"
        affinity:
          podAffinity: *netbox-pod-affinity
      netbox-db:
        pvcName: data-postgresql-0
        bucket: netbox-db-backup
        restoreVersion: latest
        tags:
          - "{{ $.Subcharts.databases.Values.postgresql.controllers.postgresql.containers.postgresql.image.repository }}:{{ $.Subcharts.databases.Values.postgresql.controllers.postgresql.containers.postgresql.image.tag }}"
        affinity:
          podAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: statefulset.kubernetes.io/pod-name
                  operator: In
                  values:
                  - postgresql-0
              topologyKey: kubernetes.io/hostname
